{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\nimport { mimeType } from \"./mime-type.validator\";\nlet PostCreateComponent = class PostCreateComponent {\n  constructor(postsService, route) {\n    this.postsService = postsService;\n    this.route = route;\n    this.enteredTitle = \"\";\n    this.enteredContent = \"\";\n    this.isLoading = false;\n    this.mode = \"create\";\n  }\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      title: new FormControl(null, {\n        validators: [Validators.required, Validators.minLength(3)]\n      }),\n      content: new FormControl(null, {\n        validators: [Validators.required]\n      }),\n      image: new FormControl(null, {\n        validators: [Validators.required],\n        asyncValidators: [mimeType]\n      })\n    });\n    this.route.paramMap.subscribe(paramMap => {\n      if (paramMap.has(\"postId\")) {\n        this.mode = \"edit\";\n        this.postId = paramMap.get(\"postId\");\n        this.isLoading = true;\n        this.postsService.getPost(this.postId).subscribe(postData => {\n          this.isLoading = false;\n          this.post = {\n            id: postData._id,\n            title: postData.title,\n            content: postData.content,\n            imagePath: postData.imagePath\n          };\n          this.form.setValue({\n            title: this.post.title,\n            content: this.post.content,\n            image: this.post.imagePath\n          });\n        });\n      } else {\n        this.mode = \"create\";\n        this.postId = null;\n      }\n    });\n  }\n\n  onImagePicked(event) {\n    const file = event.target.files[0];\n    this.form.patchValue({\n      image: file\n    });\n    this.form.get(\"image\").updateValueAndValidity();\n    const reader = new FileReader();\n\n    reader.onload = () => {\n      this.imagePreview = reader.result;\n    };\n\n    reader.readAsDataURL(file);\n  }\n\n  onSavePost() {\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.isLoading = true;\n\n    if (this.mode === \"create\") {\n      this.postsService.addPost(this.form.value.title, this.form.value.content, this.form.value.image);\n    } else {\n      this.postsService.updatePost(this.postId, this.form.value.title, this.form.value.content, this.form.value.image);\n    }\n\n    this.form.reset();\n  }\n\n};\nPostCreateComponent = __decorate([Component({\n  selector: \"app-post-create\",\n  templateUrl: \"./\",\n  styleUrls: [\"./post-create.component.css\"]\n})], PostCreateComponent);\nexport { PostCreateComponent };","map":{"version":3,"sources":["C:/Users/roman/Desktop/Mean/Posts-App/src/app/posts/post-create/post-create.component.ts"],"names":["__decorate","Component","FormGroup","FormControl","Validators","mimeType","PostCreateComponent","constructor","postsService","route","enteredTitle","enteredContent","isLoading","mode","ngOnInit","form","title","validators","required","minLength","content","image","asyncValidators","paramMap","subscribe","has","postId","get","getPost","postData","post","id","_id","imagePath","setValue","onImagePicked","event","file","target","files","patchValue","updateValueAndValidity","reader","FileReader","onload","imagePreview","result","readAsDataURL","onSavePost","invalid","addPost","value","updatePost","reset","selector","templateUrl","styleUrls"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component } from \"@angular/core\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { mimeType } from \"./mime-type.validator\";\r\nlet PostCreateComponent = class PostCreateComponent {\r\n    constructor(postsService, route) {\r\n        this.postsService = postsService;\r\n        this.route = route;\r\n        this.enteredTitle = \"\";\r\n        this.enteredContent = \"\";\r\n        this.isLoading = false;\r\n        this.mode = \"create\";\r\n    }\r\n    ngOnInit() {\r\n        this.form = new FormGroup({\r\n            title: new FormControl(null, {\r\n                validators: [Validators.required, Validators.minLength(3)]\r\n            }),\r\n            content: new FormControl(null, { validators: [Validators.required] }),\r\n            image: new FormControl(null, {\r\n                validators: [Validators.required],\r\n                asyncValidators: [mimeType]\r\n            })\r\n        });\r\n        this.route.paramMap.subscribe((paramMap) => {\r\n            if (paramMap.has(\"postId\")) {\r\n                this.mode = \"edit\";\r\n                this.postId = paramMap.get(\"postId\");\r\n                this.isLoading = true;\r\n                this.postsService.getPost(this.postId).subscribe(postData => {\r\n                    this.isLoading = false;\r\n                    this.post = {\r\n                        id: postData._id,\r\n                        title: postData.title,\r\n                        content: postData.content,\r\n                        imagePath: postData.imagePath\r\n                    };\r\n                    this.form.setValue({\r\n                        title: this.post.title,\r\n                        content: this.post.content,\r\n                        image: this.post.imagePath\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                this.mode = \"create\";\r\n                this.postId = null;\r\n            }\r\n        });\r\n    }\r\n    onImagePicked(event) {\r\n        const file = event.target.files[0];\r\n        this.form.patchValue({ image: file });\r\n        this.form.get(\"image\").updateValueAndValidity();\r\n        const reader = new FileReader();\r\n        reader.onload = () => {\r\n            this.imagePreview = reader.result;\r\n        };\r\n        reader.readAsDataURL(file);\r\n    }\r\n    onSavePost() {\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n        this.isLoading = true;\r\n        if (this.mode === \"create\") {\r\n            this.postsService.addPost(this.form.value.title, this.form.value.content, this.form.value.image);\r\n        }\r\n        else {\r\n            this.postsService.updatePost(this.postId, this.form.value.title, this.form.value.content, this.form.value.image);\r\n        }\r\n        this.form.reset();\r\n    }\r\n};\r\nPostCreateComponent = __decorate([\r\n    Component({\r\n        selector: \"app-post-create\",\r\n        templateUrl: \"./\",\r\n        styleUrls: [\"./post-create.component.css\"]\r\n    })\r\n], PostCreateComponent);\r\nexport { PostCreateComponent };\r\n"]},"metadata":{},"sourceType":"module"}