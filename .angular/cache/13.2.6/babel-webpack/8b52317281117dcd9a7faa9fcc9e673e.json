{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\roman\\\\Desktop\\\\Mean\\\\Posts-App\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport _classCallCheck from \"C:\\\\Users\\\\roman\\\\Desktop\\\\Mean\\\\Posts-App\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\roman\\\\Desktop\\\\Mean\\\\Posts-App\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Subject } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { Router } from \"@angular/router\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport var PostsService = /*#__PURE__*/(function () {\n  var PostsService = /*#__PURE__*/function () {\n    function PostsService(http, router) {\n      _classCallCheck(this, PostsService);\n\n      this.http = http;\n      this.router = router;\n      this.posts = [];\n      this.postsUpdated = new Subject();\n    }\n\n    _createClass(PostsService, [{\n      key: \"getPosts\",\n      value: function getPosts(postsPerPage, currentPage) {\n        var _this = this;\n\n        var queryParams = \"?pagesize=\".concat(postsPerPage, \"&page=\").concat(currentPage);\n        this.http.get(\"http://localhost:3000/api/posts\" + queryParams).pipe(map(function (postData) {\n          return {\n            posts: postData.posts.map(function (post) {\n              return {\n                title: post.title,\n                content: post.content,\n                id: post._id,\n                imagePath: post.imagePath\n              };\n            }),\n            maxPosts: postData.maxPosts\n          };\n        })).subscribe(function (data) {\n          _this.posts = data.posts;\n\n          _this.postsUpdated.next({\n            posts: _toConsumableArray(_this.posts),\n            postsCount: data.maxPosts\n          });\n        });\n      }\n    }, {\n      key: \"getPostUpdateListener\",\n      value: function getPostUpdateListener() {\n        return this.postsUpdated.asObservable();\n      }\n    }, {\n      key: \"getPost\",\n      value: function getPost(id) {\n        return this.http.get(\"http://localhost:3000/api/posts/\" + id);\n      }\n    }, {\n      key: \"addPost\",\n      value: function addPost(title, content, image) {\n        var _this2 = this;\n\n        var postData = new FormData();\n        postData.append(\"title\", title);\n        postData.append(\"content\", content);\n        postData.append(\"image\", image, title);\n        this.http.post(\"http://localhost:3000/api/posts\", postData).subscribe(function (responseData) {\n          var post = {\n            id: responseData.post.id,\n            title: title,\n            content: content,\n            imagePath: responseData.post.imagePath\n          };\n\n          _this2.posts.push(post);\n\n          _this2.postsUpdated.next(_toConsumableArray(_this2.posts));\n\n          _this2.router.navigate([\"/\"]);\n        });\n      }\n    }, {\n      key: \"updatePost\",\n      value: function updatePost(id, title, content, image) {\n        var _this3 = this;\n\n        var postData;\n\n        if (typeof image === \"object\") {\n          postData = new FormData();\n          postData.append(\"id\", id);\n          postData.append(\"title\", title);\n          postData.append(\"content\", content);\n          postData.append(\"image\", image, title);\n        } else {\n          postData = {\n            id: id,\n            title: title,\n            content: content,\n            imagePath: image\n          };\n        }\n\n        this.http.put(\"http://localhost:3000/api/posts/\" + id, postData).subscribe(function (response) {\n          var updatedPosts = _toConsumableArray(_this3.posts);\n\n          var oldPostIndex = updatedPosts.findIndex(function (p) {\n            return p.id === id;\n          });\n          var post = {\n            id: id,\n            title: title,\n            content: content,\n            imagePath: \"\"\n          };\n          updatedPosts[oldPostIndex] = post;\n          _this3.posts = updatedPosts;\n\n          _this3.postsUpdated.next(_toConsumableArray(_this3.posts));\n\n          _this3.router.navigate([\"/\"]);\n        });\n      }\n    }, {\n      key: \"deletePost\",\n      value: function deletePost(postId) {\n        var _this4 = this;\n\n        this.http.delete(\"http://localhost:3000/api/posts/\" + postId).subscribe(function () {\n          var updatedPosts = _this4.posts.filter(function (post) {\n            return post.id !== postId;\n          });\n\n          _this4.posts = updatedPosts;\n\n          _this4.postsUpdated.next(_toConsumableArray(_this4.posts));\n        });\n      }\n    }]);\n\n    return PostsService;\n  }();\n\n  PostsService.ɵfac = function PostsService_Factory(t) {\n    return new (t || PostsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  PostsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostsService,\n    factory: PostsService.ɵfac,\n    providedIn: \"root\"\n  });\n  return PostsService;\n})();","map":null,"metadata":{},"sourceType":"module"}